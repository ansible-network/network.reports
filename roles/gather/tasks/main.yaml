---
- name: Include validation tasks
  ansible.builtin.include_tasks: validation.yaml

- name: Include network resources tasks
  ansible.builtin.include_tasks: network_resources.yaml

- name: Include system resources tasks
  ansible.builtin.include_tasks: system_resources.yaml

- name: Add gathered system data structure under 'device_info' key
  ansible.builtin.set_fact:
    gather_result:
      all_gathered_resources: >-
        {{
          (all_gathered_resources | default({}))
          | combine(
              {'device_info': (system_resources | default({})) | combine({'ansible_network_os': ansible_network_os | default('')})}
            )
        }}

# - name: Add gathered system data structure under 'inventory_name' key
#   ansible.builtin.set_fact:
#     "{{ inventory_hostname }}":
#       all_gathered_resources: >-
#         {{
#           (all_gathered_resources | default({}))
#           | combine(
#               {'device_info': (system_resources | default({})) | combine({'ansible_network_os': ansible_network_os | default('')})}
#             )
#         }}


- name: Add gathered system data structure under 'inventory_name' key
  ansible.builtin.set_fact:
    all_gathered_by_host: >-
      {{
        (all_gathered_by_host | default({}))
        | combine({
            inventory_hostname: {
              'all_gathered_resources': {
                'device_info': (system_resources | default({}))
                | combine({'ansible_network_os': ansible_network_os | default('')})
              }
            }
          })
      }}

    
- name: Initialize network report dictionary
  ansible.builtin.set_fact:
    network_reports: {}
  run_once: true
  delegate_to: localhost
  
- name: Aggregate gathered data from each host
  ansible.builtin.set_fact:
    network_reports: >-
      {{
        network_reports | combine({
          item: hostvars[item].gather_result
        })
      }}
  loop: "{{ groups['network'] }}"
  run_once: true
  delegate_to: localhost

- name: display network_reports
  ansible.builtin.debug:
    msg: "{{ network_reports }}"
  run_once: true
  delegate_to: localhost
  
- name: Display gathered facts as pretty JSON
  ansible.builtin.debug:
    msg: "{{ network_reports | to_nice_json }}"
  when: format is defined and format == 'json'
  run_once: true

- name: Display gathered facts as pretty YAML
  ansible.builtin.debug:
    msg: "{{ network_reports | to_nice_yaml }}"
  when: format is defined and format == 'yaml' or format is not defined
  run_once: true

- name: Ensure dicttoxml is installed on the control node for XML output
  ansible.builtin.pip:
    name: dicttoxml
    state: present
  delegate_to: localhost
  run_once: true
  become: no 
  when: format is defined and format == 'xml'

- name: Convert gathered facts to pretty XML format
  ansible.builtin.command:
    cmd: >
      python -c "import sys, json, dicttoxml; from xml.dom import minidom;
      xml_bytes = dicttoxml.dicttoxml(json.load(sys.stdin), custom_root='facts');
      dom = minidom.parseString(xml_bytes);
      pretty_xml = dom.toprettyxml(indent='  ');
      print(pretty_xml)"
  args:
    stdin: "{{ network_reports | to_json }}" 
  register: xml_conversion_output
  changed_when: false
  check_mode: no
  delegate_to: localhost 
  run_once: true         
  when: format is defined and format == 'xml'

- name: Display gathered facts as pretty XML
  ansible.builtin.debug:
    msg: "{{ xml_conversion_output.stdout }}"
  when:
    - format is defined
    - format == 'xml'
    - xml_conversion_output is defined
    - not xml_conversion_output.failed
  run_once: true
  
- name: Flatten gathered data using custom filter
  ansible.builtin.set_fact:
    flattened_reports: >-
      {{ 
        network_reports | dict2items 
        | map(attribute='value') 
        | map('network.reports.flatten_dict') 
        | list 
      }}
  run_once: true
  delegate_to: localhost
  when: format is defined and format == 'csv'

- name: display flattened_reports
  ansible.builtin.debug:
    msg: "{{ flattened_reports }}"
  run_once: true
  delegate_to: localhost
  when: format is defined and format == 'csv'

- name: Write a single CSV-style report with vertical parameter:value per device
  ansible.builtin.copy:
    dest: "/tmp/report_all_devices.csv"
    content: |
      {% for device in flattened_reports %}
      ======= DEVICE: {{ device['all_gathered_resources_device_info_device_name'] | default('unknown') }} =======
      {% for key, value in device.items() %}
      {{ key }}, {{ value }}
      {% endfor %}
      {% if not loop.last %}{{ '\n' }}{% endif %}
      {% endfor %}
  run_once: true
  delegate_to: localhost
  when: format is defined and format == 'csv'
