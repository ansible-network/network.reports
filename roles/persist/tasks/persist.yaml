---
- name: Get the supported resource modules
  ansible.netcommon.network_resource:
    os_name: "{{ ansible_network_os }}"
  register: persist_network_resources_list

- name: Set default resources
  ansible.builtin.set_fact:
    persist_resources: "{{ persist_network_resources_list['modules'] }}"
  when: persist_resources is undefined

- name: Set network resources when resources is not defined
  ansible.builtin.set_fact:
    persist_network_resources:
      actionable: "{{ persist_resources }}"
      unsupported: []
  when: resources is undefined

- name: Set Network resources
  ansible.builtin.set_fact:
    persist_network_resources: "{{ persist_network_resources_list['modules'] | ansible.utils.param_list_compare(resources) }}"
  when: resources is defined
  
- name: Resolve inventory
  ansible.builtin.include_tasks: manage_inventory.yaml

# --------------- filename and dir customization ----------
- name: Get scm url
  ansible.builtin.set_fact:
    network_backup_path_root: "{{ role_path }}/{{  data_store.scm.origin.url.split('/')[-1] }}"
  when: data_store['scm']['origin'] is defined

- name: Get file name
  ansible.builtin.set_fact:
    persist_inventory_path: "{{ network_backup_path_root }}/{{  data_store.scm.origin.path | default(role_path, true)}}"
  when: data_store['scm']['origin'] is defined

- name: Get timestamp
  ansible.builtin.set_fact:
    timestamp: "{{ lookup('pipe', 'date +%Y-%m-%d_%H-%M-%S') }}"

- name: Set default filename
  ansible.builtin.set_fact:
    persist_inventory_filename: >-
      {{ data_store.scm.origin.filename | default(inventory_hostname ~ '_' ~ timestamp ~ '.txt', true) }}

# ---------------------------------------------------------

- name: Include retrieve tasks
  ansible.builtin.include_tasks: retrieve.yaml
  when: data_store['scm'] is defined

- name: Ensure persist_result is initialized as an empty list
  ansible.builtin.set_fact:
    persist_result: {}

- name: Include facts tasks
  ansible.builtin.include_tasks: facts.yaml
  loop: "{{ persist_network_resources['actionable'] }}"
  loop_control:
    loop_var: res

- name: Include System resources
  ansible.builtin.include_tasks: system_resources.yaml

- name: Add gathered system data structure under 'device_info' key
  ansible.builtin.set_fact:
    persist_result:
      all_gathered_resources: >-
        {{
          (persist_result | default({}))
          | combine(
              {'device_info': (gathered_system_data | default({})) | combine({'ansible_network_os': ansible_network_os | default('')})}
            )
        }}
- name: Get timestamp
  ansible.builtin.set_fact:
    timestamp: "{{ lookup('pipe', 'date -u +%Y-%m-%dT%H:%M:%SZ') }}"

- name: Inject metadata inside all_gathered_resources
  ansible.builtin.set_fact:
    persist_result:
      all_gathered_resources: >-
        {{
          persist_result['all_gathered_resources']
          | combine({
              'metadata': {
                'ip': ansible_host | default(inventory_hostname),
                'inventory_hostname': inventory_hostname,
                'timestamp': timestamp,
                'report_version': "1.0"
              }
            })
        }}

# - name: Add metadata to final persist_result
#   ansible.builtin.set_fact:
#     persist_result['all_gathered_resources']:
#       metadata:
#         ip: "{{ ansible_host | default(inventory_hostname) }}"
#         inventory_hostname: "{{ inventory_hostname }}"
#         timestamp: "{{ timestamp }}"
#         report_version: "1.0"
#       all_gathered_resources: "{{ persist_result['all_gathered_resources'] }}"

- name: Store persist_result as pretty JSON
  ansible.builtin.set_fact:
    persist_result_output: "{{ persist_result['all_gathered_resources'] | to_nice_json }}"
  when: format is defined and format == 'json' or format is not defined
 
- name: Store persist_result as pretty yaml
  ansible.builtin.set_fact:
    persist_result_output: "{{ persist_result['all_gathered_resources'] | to_nice_yaml }}"
  when: format is defined and format == 'yaml'

- name: Ensure dicttoxml is installed on the control node for XML output
  ansible.builtin.pip:
    name: dicttoxml
    state: present
  delegate_to: localhost
  when: format is defined and format == 'xml'

- name: Convert gathered facts to pretty XML format
  become: false
  ansible.builtin.command:
    cmd: >
      python -c "import sys, json, dicttoxml; from xml.dom import minidom;
      xml_bytes = dicttoxml.dicttoxml(json.load(sys.stdin), custom_root='facts');
      dom = minidom.parseString(xml_bytes);
      pretty_xml = dom.toprettyxml(indent='  ');
      print(pretty_xml)"
  
  args:
    stdin: "{{ persist_result['all_gathered_resources'] | to_json }}" 
  register: xml_conversion_output
  changed_when: false
  check_mode: no       
  when: format is defined and format == 'xml'

- name: Display gathered facts as pretty XML
  ansible.builtin.set_fact:
    persist_result_output: "{{ xml_conversion_output.stdout }}"
  when:
    - format is defined
    - format == 'xml'
    - xml_conversion_output is defined
    - not xml_conversion_output.failed

- name: Flatten gathered data using custom filter
  ansible.builtin.set_fact:
    flattened_reports: >-
      {{ 
        persist_result['all_gathered_resources'] | dict2items 
        | map(attribute='value') 
        | map('network.reports.flatten_dict') 
        | list 
      }}
  delegate_to: localhost
  when: format is defined and format == 'csv'

- name: display flattened_reports
  ansible.builtin.debug:
    msg: "{{ flattened_reports['all_gathered_resources'] }}"
  delegate_to: localhost
  when: format is defined and format == 'csv'

- name: Convert flattened_reports list of dicts to CSV string
  ansible.builtin.set_fact:
    persist_result_output: |
      {% set keys = flattened_reports[0].keys() | list %}
      {{ keys | join(',') }}
      {% for item in flattened_reports %}
      {{ keys | map('extract', item) | map('default', '') | join(',') }}
      {% endfor %}
  when: format is defined and format == 'csv' and flattened_reports | length > 0

- name: write to file
  ansible.builtin.include_tasks: write_to_file.yaml

- name: Include publish with tag tasks
  ansible.builtin.include_tasks: publish_tag.yaml
  when:
    - data_store.scm.origin is defined
    - data_store.scm.origin.tag is defined

- name: Include publish without tag tasks
  ansible.builtin.include_tasks: publish.yaml
  when:
    - data_store.scm.origin is defined
    - data_store.scm.origin.tag is not defined
